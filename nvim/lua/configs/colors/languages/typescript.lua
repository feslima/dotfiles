---@param c ColorsTable
---@return table
local set_colors = function(c)
	return {
		["@include.typescript"] = { fg = c.vscPink, bg = c.vscNone },
		["@variable.typescript"] = { fg = c.vscLightBlue, bg = c.vscNone },
		["@type.typescript"] = { fg = c.vscBlueGreen, bg = c.vscNone },
		["@keyword.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@keyword.export.typescript"] = { fg = c.vscPink, bg = c.vscNone },
		["@keyword.coroutine.typescript"] = { fg = c.vscPink, bg = c.vscNone },
		["@attribute.typescript"] = { fg = c.vscBlueGreen, bg = c.vscNone },
		["@property.typescript"] = { fg = c.vscLightBlue, bg = c.vscNone },
		["@variable.builtin.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@type.qualifier.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@parameter.typescript"] = { fg = c.vscLightBlue, bg = c.vscNone },
		["@punctuation.special.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@constant.builtin.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@operator.typescript"] = { fg = c.vscFront, bg = c.vscNone },
		["@conditional.typescript"] = { fg = c.vscPink, bg = c.vscNone },
		["@keyword.operator.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@constant.typescript"] = { fg = c.vscAccentBlue, bg = c.vscNone },
		["@exception.typescript"] = { fg = c.vscPink, bg = c.vscNone },
		["@constructor.typescript"] = { fg = c.vscBlue, bg = c.vscNone },
		["@lsp.type.class.typescript"] = { fg = c.vscBlueGreen, bg = c.vscNone },
		["@lsp.type.interface.typescript"] = { fg = c.vscBlueGreen, bg = c.vscNone },
		["@lsp.typemod.property.declaration.typescript"] = { fg = c.vscLightBlue, bg = c.vscNone },
		["@lsp.type.property.typescript"] = { fg = c.vscLightBlue, bg = c.vscNone },
		["@lsp.typemod.variable.readonly.typescript"] = { fg = c.vscAccentBlue, bg = c.vscNone },
		["@lsp.typemod.variable.local.svelte"] = { fg = c.vscLightBlue, bg = c.vscNone },
		["@lsp.type.typeParameter.typescript"] = { link = "@type.typescript" },
		["@lsp.typemod.typeParameter.declaration.typescript"] = { link = "@type.typescript" },
		["@lsp.typemod.variable.defaultLibrary.typescript"] = { fg = c.vscLightBlue, bg = c.vscNone },

		-- miscellaneous
		typescriptLabel = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptExceptions = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptBraces = { fg = c.vscFront, bg = c.vscNone },
		typescriptEndColons = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptParens = { fg = c.vscFront, bg = c.vscNone },
		typescriptDocTags = { fg = c.vscBlue, bg = c.vscNone },
		typescriptDocComment = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptLogicSymbols = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptImport = { fg = c.vscPink, bg = c.vscNone },
		typescriptBOM = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptVariableDeclaration = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptVariable = { fg = c.vscBlue, bg = c.vscNone },
		typescriptExport = { fg = c.vscPink, bg = c.vscNone },
		typescriptAliasDeclaration = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptAliasKeyword = { fg = c.vscBlue, bg = c.vscNone },
		typescriptClassName = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptAccessibilityModifier = { fg = c.vscBlue, bg = c.vscNone },
		typescriptOperator = { fg = c.vscBlue, bg = c.vscNone },
		typescriptArrowFunc = { fg = c.vscBlue, bg = c.vscNone },
		typescriptMethodAccessor = { fg = c.vscBlue, bg = c.vscNone },
		typescriptMember = { fg = c.vscYellow, bg = c.vscNone },
		typescriptTypeReference = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptTemplateSB = { fg = c.vscYellowOrange, bg = c.vscNone },
		typescriptArrowFuncArg = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptParamImpl = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptFuncComma = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptCastKeyword = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptCall = { fg = c.vscBlue, bg = c.vscNone },
		typescriptCase = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptReserved = { fg = c.vscPink, bg = c.vscNone },
		typescriptDefault = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptDecorator = { fg = c.vscYellow, bg = c.vscNone },
		typescriptPredefinedType = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptClassHeritage = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptClassExtends = { fg = c.vscBlue, bg = c.vscNone },
		typescriptClassKeyword = { fg = c.vscBlue, bg = c.vscNone },
		typescriptBlock = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptDOMDocProp = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptTemplateSubstitution = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptClassBlock = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptFuncCallArg = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptIndexExpr = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptConditionalParen = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptArray = { fg = c.vscYellow, bg = c.vscNone },
		typescriptES6SetProp = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptObjectLiteral = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptTypeParameter = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptEnumKeyword = { fg = c.vscBlue, bg = c.vscNone },
		typescriptEnum = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptLoopParen = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptParenExp = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptModule = { fg = c.vscLightBlue, bg = c.vscNone },
		typescriptAmbientDeclaration = { fg = c.vscBlue, bg = c.vscNone },
		typescriptFuncTypeArrow = { fg = c.vscBlue, bg = c.vscNone },
		typescriptInterfaceHeritage = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptInterfaceName = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptInterfaceKeyword = { fg = c.vscBlue, bg = c.vscNone },
		typescriptInterfaceExtends = { fg = c.vscBlue, bg = c.vscNone },
		typescriptGlobal = { fg = c.vscBlueGreen, bg = c.vscNone },
		typescriptAsyncFuncKeyword = { fg = c.vscBlue, bg = c.vscNone },
		typescriptFuncKeyword = { fg = c.vscBlue, bg = c.vscNone },
		typescriptGlobalMethod = { fg = c.vscYellow, bg = c.vscNone },
		typescriptPromiseMethod = { fg = c.vscYellow, bg = c.vscNone },
	}
end

return set_colors
